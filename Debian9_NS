#Данное руководство не претендует на полноту и использование best practices, предварительно необходимо установить Debian 9, подключить его к интернету, обновить, пробросить HTTP, HTTPS, SSH
# все манипуляции проводились под пользователем root. Необходимы минимальные навыки использования редактора nano

#разрешаем ssh для root если необходимо
cd /etc/ssh
nano sshd_config
#добавляем строку PermitRootLogin yes
#сохраняем

systemctl restart ssh

#переходим для удобства в putty

apt-get install sudo
apt-get -y install curl
apt-get -y install mc #не обязательно

#для Hyper-V ставим средства интеграции
nano /etc/initramfs-tools/modules
#добавляем строки
hv_vmbus
hv_storvsc
hv_blkvsc
hv_netvsc
#сохраняяем

sudo apt-get -y install hyperv-daemons
update-initramfs -u
reboot
#для иных виртуализаций ставим свои

#для vmware
apt-get install -y open-vm-tools open-vm-tools-desktop
vmware-user-suid-wrapper


#смотрим актуальный релиз mongo https://www.mongodb.com/download-center/community и при наличии более свежей версии меняем значения ниже
curl https://www.mongodb.org/static/pgp/server-4.2.asc | sudo apt-key add -
nano /etc/apt/sources.list.d/mongodb-org-4.2.list
#добавляем строку 
deb http://repo.mongodb.org/apt/debian stretch/mongodb-org/4.2 main
#сохраняем

apt-get update
apt-get -y install mongodb-org
systemctl enable mongod
systemctl start mongod

#создаем БД - имя и пароль свои
mongo
> use Nightscout
> db.createUser({user: "username", pwd: "password", roles:["readWrite"]})
> quit()

apt-get -y install git

apt-get -y install curl software-properties-common
curl -sL https://deb.nodesource.com/setup_10.x | sudo bash -
apt-get install -y nodejs

apt-get install -y gcc

apt-get install -y build-essential

#Перходим в папку установки - может быть произвольной. В данном варианте /opt
cd /opt 
mkdir nightscout
cd nightscout
git clone https://github.com/nightscout/cgm-remote-monitor.git
cd cgm-remote-monitor
npm install --unsafe-perm


#переменные среды
# можно прописать в глобальных системных переменных nano /etc/environment 
# либо создаем файлик nano start.sh

#!/bin/bash
export DISPLAY_UNITS="mg/dl"
export MONGO_CONNECTION="mongodb://username:password@localhost:27017/Nightscout"
export PORT=1337
export API_SECRET="Api_Secret_min_12_symbols"
export PUMP_FIELDS="reservoir battery status"
export DEVICESTATUS_ADVANCED=true
export ENABLE="careportal basal cage sage boluscalc rawbg iob bwp bage mmconnect bridge openaps pump iob maker"
export TIME_FORMAT=24
export BASE_URL="YOURS_INTERNET_URL.RU"
export INSECURE_USE_HTTP=true


export ALARM_HIGH=on
export ALARM_LOW=on
export ALARM_TIMEAGO_URGENT=on
export ALARM_TIMEAGO_URGENT_MINS=30
export ALARM_TIMEAGO_WARN=on
export ALARM_TIMEAGO_WARN_MINS=15
export ALARM_TYPES=simple
export ALARM_URGENT_HIGH=on
export ALARM_URGENT_LOW=on
export AUTH_DEFAULT_ROLES=denied
export BG_HIGH=180
export BG_LOW=72
export BG_TARGET_BOTTOM=90
export BG_TARGET_TOP=162
export BRIDGE_MAX_COUNT=1
export BRIDGE_PASSWORD=
export BRIDGE_SERVER=EU
export BRIDGE_USER_NAME=
export CUSTOM_TITLE=MyTitle
export DISABLE=
export MONGO_COLLECTION=entries
export NIGHT_MODE=on
export OPENAPS_ENABLE_ALERTS=true
export OPENAPS_FIELDS='status-symbol status-label iob meal-assist rssi'
export OPENAPS_RETRO_FIELDS='status-symbol status-label iob meal-assist rssi'
export OPENAPS_URGENT=60
export OPENAPS_WARN=20
#export PAPERTRAIL_API_TOKEN=some_token
export PUMP_ENABLE_ALERTS=true
export PUMP_FIELDS='battery reservoir clock status'
export PUMP_RETRO_FIELDS='battery reservoir clock status'
export PUMP_URGENT_BATT_V=1.3
export PUMP_URGENT_CLOCK=30
export PUMP_URGENT_RES=10
export PUSHOVER=
export SHOW_FORECAST=openaps
export SHOW_PLUGINS='openaps pump iob sage cage careportal'
export SHOW_RAWBG=noise
export THEME=colors

# start server
node server.js

#сохраняем

chmod +x start.sh
./start.sh


#после запуска ./start.sh через несколько минут в цикле должно появится
#reloading sandbox data
#all buckets are empty
#For the Basal plugin to function you need a treatment profile
#OpenAPS hasn't reported a loop yet
#WS: running websocket.update
#delta calculation indicates no new data is present
#tick 2019-11-28T10:28:28.794Z
#Load Complete:
#
#после чего можно пробовать заходить http://ip_of_debian:1337 - должен открыться НС и попросить api_secert 

# настраиваем автозапуск
  nano /etc/systemd/system/nightscout.service
# вставляем строки
	[Unit]
	Description=Nightscout Service      
	After=network.target

	[Service]
	Type=simple
	WorkingDirectory=/opt/nightscout/cgm-remote-monitor
	ExecStart=/opt/nightscout/cgm-remote-monitor/start.sh

	[Install]
	WantedBy=multi-user.target

# cохраняем  

# разрешаем автозапуск
	systemctl daemon-reload
	systemctl enable nightscout.service
	systemctl start nightscout.service 

# проверка, запущен ли сервис:

   systemctl status nightscout.service 
 
#обновление переменных среды, если прописали в глобальных
	source /etc/environment

# установка и настройка обратного прокси
	apt-get install nginx
	systemctl enable nginx
# конфиг ngnix
	nano /etc/nginx/sites-available/default
#добавляем строки

server {
   listen 80;
   server_name YOURS_INTERNET_URL.RU;
   root /usr/share/nginx/html;
   location ~ /.well-known {
               allow all;
   }
  } 
server {
   listen 443 ssl;
   server_name YOURS_INTERNET_URL.RU;
   root /usr/share/nginx/html;

#       ssl_certificate     /etc/letsencrypt/live/YOURS_INTERNET_URL.RU/fullchain.pem;
#       ssl_certificate_key /etc/letsencrypt/live/YOURS_INTERNET_URL.RU/privkey.pem;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers on;
        ssl_dhparam /etc/ssl/certs/dhparam.pem;
        ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM$
CDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AE$
HE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-EC$
84:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES$
RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-$
HA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aE$
S-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;
        ssl_stapling on;
        ssl_stapling_verify on;
        add_header Strict-Transport-Security max-age=15768000;
        resolver 8.8.8.8 8.8.4.4 valid=300s;

       location ~ /.well-known {
               allow all;
       }
       location / {
          proxy_pass http://127.0.0.1:1337;
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection 'upgrade';
          proxy_set_header Host $host;
          proxy_cache_bypass $http_upgrade;
        }


}

#сохраняем ctrl+x

# получение сертификата
	sudo apt-get install certbot
	certbot certonly --webroot --agree-tos --email youmail@mail.com -w /usr/share/nginx/html/ -d YOURS_INTERNET_URL.RU 
	openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048
# в конфиг ngnix 
	nano /etc/nginx/sites-available/default
#в секцию server добавляем строки
	ssl_certificate     /etc/letsencrypt/live/YOURS_INTERNET_URL.RU/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/YOURS_INTERNET_URL.RU/privkey.pem;
	
#перезапуск nginx
	systemctl reload nginx
#проверка запуска ngnix
	systemctl status nginx
# NightScout доступен по адресу https://YOURS_INTERNET_URL.RU
